#!/usr/bin/env python
# Time-stamp: <2020-05-08 12:21:24 smathias>
"""Load IDG family and extended family designations into TCRD from text file.

Usage:
    load-IDGFamsExt.py [--debug | --quiet] [--dbhost=<str>] [--dbname=<str>]
    load-IDGFamsExt.py -h | --help

Options:
  -i --infile INFILE   : Input pickle file containing IDG Family data
  -h --dbhost DBHOST   : MySQL database host name [default: localhost]
  -n --dbname DBNAME   : MySQL database name [default: tcrdev]
  -q --quiet           : set output verbosity to minimal level
  -d --debug           : turn on debugging output
  -? --help            : print this message and exit 
"""
__author__    = "Steve Mathias"
__email__     = "smathias @salud.unm.edu"
__org__       = "Translational Informatics Division, UNM School of Medicine"
__copyright__ = "Copyright 2017-2020, Steve Mathias"
__license__   = "Creative Commons Attribution-NonCommercial (CC BY-NC)"
__version__   = "2.0.0"

import os,sys,time
from docopt import docopt
from TCRD7 import DBAdaptor
import csv
from progressbar import *
import slm_tcrd_functions as slmf

PROGRAM = os.path.basename(sys.argv[0])
INFILE = '../data/IDG_Families_UNM_UMiami_v2.csv'

def load(args):
  dba_params = {'dbhost': args['--dbhost'], 'dbname': args['--dbname'], 'logger_name': __name__}
  dba = DBAdaptor(dba_params)
  dbi = dba.get_dbinfo()
  if not args['--quiet']:
    print "\nConnected to TCRD database %s (schema ver %s; data ver %s)" % (args['--dbname'], dbi['schema_ver'], dbi['data_ver'])

  # Dataset
  dataset_id = dba.ins_dataset( {'name': 'IDG Families', 'source': 'IDG-KMC generated data from file %s'%os.path.basename(INFILE), 'app': PROGRAM, 'app_version': __version__, 'comments': "Target family designations generated by IDG-KMC groups at UNM and UMiami."} )
  if not dataset_id:
    print "WARNING: Error inserting dataset See logfile %s for details." % logfile
    sys.exit(1)
  # Provenance
  rv = dba.ins_provenance({'dataset_id': dataset_id, 'table_name': 'target', 'column_name': 'tiofam'})
  if not rv:
    print "WARNING: Error inserting provenance. See logfile %s for details." % logfile
    sys.exit(1)
  
  line_ct = slmf.wcl(INFILE)
  if not args['--quiet']:
    print "\nProcessing {} lines in file {}".format(line_ct, INFILE)
  pbar_widgets = ['Progress: ',Percentage(),' ',Bar(marker='#',left='[',right=']'),' ',ETA()]
  pbar = ProgressBar(widgets=pbar_widgets, maxval=line_ct).start()
  ct = 0
  idg_ct = 0
  upd_ct1 = 0
  upd_ct2 = 0
  null_ct = 0
  notfnd = []
  mulfnd = []
  dba_err_ct = 0
  with open(INFILE, 'rU') as csvfile:
    csvreader = csv.reader(csvfile)
    header = csvreader.next() # skip header line
    ct += 1
    for row in csvreader:
      ct += 1
      pbar.update(ct)
      up = row[2].strip()
      fam = row[3].strip()
      famext = row[4].strip()
      if not fam:
        null_ct += 1
        continue
      targets = dba.find_targets({'uniprot': up})
      if not targets:
        notfnd.append(up)
        continue
      if len(targets) > 1:
        mulfnd.append(up)
        continue
      t = targets[0]
      # only update fam for non-IDG targets
      # IDG target fams are set by load-IDGList.py
      if t['fam']:
        idg_ct += 1
        continue
      rv = dba.rv = dba.upd_target(t['id'], 'fam', fam)
      if not rv:
        print "ERROR updating target.fam: %d to %s" % (t['id'], fam)
      else:
        upd_ct1 += 1
      if famext and famext != '':
        rv = dba.upd_target(t['id'], 'famext', famext)
        if not rv:
          print "ERROR updating target.famext: %d to %s" % (t['id'], famext)
        else:
          upd_ct2 += 1
  pbar.finish()
  print "{} rows processed.".format(ct)
  print "{} IDG family designations loaded into TCRD.".format(upd_ct1)
  print "{} IDG extended family designations loaded into TCRD.".format(upd_ct2)
  print "Skipped {} IDG2 targets.".format(idg_ct)
  if notfnd:
    print "[WARNING] No target found for {} UniProt accessions: {}".format(len(notfnd), ", ".join(notfnd))
  if mulfnd:
    print "[WARNING] Multiple targets found for {} UniProt accessions: {}".format(len(mulfnd), ", ".join(mulfnd))
  if dba_err_ct > 0:
    print "WARNING: {} database errors occured. See logfile {} for details.".format(dba_err_ct, logfile)
  

if __name__ == '__main__':
  print "\n{} (v{}) [{}]:".format(PROGRAM, __version__, time.strftime("%c"))
  args = docopt(__doc__, version=__version__)
  if args['--debug']:
    print "\n[*DEBUG*] ARGS:\n%s\n"%repr(args)
  start_time = time.time()
  load(args)
  elapsed = time.time() - start_time
  print "\n{}: Done. Elapsed time: {}\n".format(PROGRAM, slmf.secs2str(elapsed))
